#!/bin/bash
userFile="/usr/usrlog"
#########################This is the start of Function part
##################For input username at the first time
inputusr ()
{
while [ -z "$user" ];
do
        while echo $user | grep -v -q @;
        do
                echo "Please Input Your Account!"
                read user
        done
done
}
##################For input username at the second time
inputusr2 ()
{
while [ -z "$user2" ];
do
        while echo $user2 | grep -v -q @;
        do
                echo "Please Input Your Account Again!"
                read user2
        done
done
}
##################For input password at the first time
inputpwd ()
{
while [ -z "$pwd" ];
do
        echo "Please Input Your Password!"
        read pwd
done
}
##################For input password at the second time
inputpwd2 ()
{
while [ -z "$pwd2" ];
do
        echo "Please Input Your Password Again!"
        read pwd2
done
}
##################For delete ss ip at the blacklist
blkignore ()
{
cd /usr/script
if [ ! -s ssblk ];
then
	echo '#######################################'
        echo "No ss-server in Blacklist can be ignore"
        echo '#######################################'
	cp /usr/script/sslist.remote /usr/script/sslist
else
        iglineno=1
        igline=$(cat -n /usr/script/ssblk|wc -l)
        ary_igaddr[1]=$(sed -n 1p /usr/script/ssblk)
        echo '#######################################'
        echo -e "No.$iglineno Blacklist ss-server will be ignore \c"
        echo "${ary_igaddr[1]}"
        echo '#######################################'
        sed "/${ary_igaddr[1]}/d" /usr/script/sslist.remote > /usr/script/sslist.1
        while (( $iglineno < $igline ));
        do
		fileno=$iglineno
                (( iglineno++ ))
        	echo '#######################################'
                echo -e "No.$iglineno Blacklist ss-server will be ignore \c"
                ary_igaddr[$iglineno]=$(sed -n "$iglineno"p /usr/script/ssblk)
                echo "${ary_igaddr[$iglineno]}"
		delip=${ary_igaddr[$iglineno]}
       		echo '#######################################'
                sed "/$delip/d" /usr/script/sslist.$fileno > /usr/script/sslist.$iglineno
        done
        cp /usr/script/sslist.$iglineno /usr/script/sslist
        iglineno=0
        while (( $iglineno < $igline ));
        do
                (( iglineno++ ))
                rm -f /usr/script/sslist.$iglineno
        done
fi
}
##################For find out useless ss-server
lkblk ()
{
lilineno=0
liline=$(cat -n /usr/script/sslivedip|wc -l)
#echo -e "\c" > /usr/script/ssblk
while (( $lilineno < $liline ))
do
        (( lilineno++ ))
        testip=$(sed -n "$lilineno"p /usr/script/sslivedip)
        set_minip=\"server\":\""$testip"\",
        sed "2s/^.*$/$set_minip/" /etc/ss-local.json > /etc/ss-local.json.tmp
        cp /etc/ss-local.json.tmp /etc/ss-local.json
        rm /etc/ss-local.json.tmp
        echo -e "\c" > /usr/script/pgreslt
        nohup ss-local -c /etc/ss-local.json >> /dev/null 2>&1 &
        curl --socks5 127.0.0.1:1080 --connect-timeout 10 https://raw.githubusercontent.com/babylon882004/urlcheck/master/check|grep -o OK > /usr/script/pgreslt
        #cd /usr/script/
pwd
        if [ ! -s pgreslt ];
        then
                echo $testip|grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' >> /usr/script/ssblk
        	echo '#########################################'
		echo "ss-server $testip will add to blacklist!"
		echo '#############i###########################'
        else
                echo '#########################################'
                echo "ss-server $testip works fine!"
                echo '#########################################'
        fi
        killall ss-local
done
}
###########################This is the end of Function part
###########################This Part used for get the user count and password, and input user count and password when run this script first time!
if [ ! -f "$userFile" ];
then
	touch "$userFile"
	inputusr
	inputusr2
        while [ "$user" != "$user2" ];
        do
		echo "Inconsistent Username Twice!"
		unset user
		unset user2
		inputusr
		inputusr2
        done
	echo $user >> $userFile
	inputpwd
	inputpwd2
	while [ "$pwd" != "$pwd2" ];
        do
		echo "Inconsistent Password Twice!"
		unset pwd
		unset pwd2
		inputpwd
		inputpwd2
        done
	echo $pwd >> $userFile
fi
###########################This is the end of below part
###########################This is Main Part START
cp /usr/script/sslist /usr/script/sslist.old
cp /usr/script/sslist.remote /usr/script/sslist.remote.old
uname=$(sed -n 1p $userFile)
upwd=$(sed -n 2p $userFile)

curl -L -c cookie --data 'username='"$uname"'&''password='"$upwd" https://my.yizhihongxing.com/dologin.php >> /dev/null 2>&1
###Update to fix url id bug
curl -b cookie https://my.yizhihongxing.com/clientarea.php?action=products |grep ';id='|grep -o '[0-9]\{1,4\}' > /usr/script/ssurlid
idlineno=0
idline=$(cat -n /usr/script/ssurlid|wc -l)
while (( $idlineno < $idline ))
do
	(( idlineno++ ))
	urlid=$(sed -n "$idlineno"p /usr/script/ssurlid)
        echo 'NO.'"$idlineno"' id '"$urlid"' testing!'
	curl -L -c cookie --data 'username='"$uname"'&''password='"$upwd" https://my.yizhihongxing.com/dologin.php >> /dev/null 2>&1
	curl -b cookie 'https://my.yizhihongxing.com/clientarea.php?action=productdetails&id='"$urlid"|grep '<a name="qrcode" data-qrcode="rc4-md5:'|grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' > /usr/script/sslist.remote
	cd /usr/script/
	if [ ! -s sslist.remote ]
	then
		echo '#########################'
		echo "Url id $urlid is useless!"
		echo '#########################'
	else
		echo '############################################################'
		echo "Url id $urlid OK! Shadowsocks server ip list will be update!"
		echo '############################################################'
		echo 'The content of sslist.remote'
		echo '############################################################'
	break
	fi
done

blkignore

iplineno=0
ipline=$(cat -n /usr/script/sslist|wc -l)
echo -e "\c" > /usr/script/sslivedip
while (( $iplineno < $ipline ));
do
        (( iplineno++ ))
        echo -e "No.$iplineno ss-server \c"
        ary_ipaddr[$iplineno]=$(sed -n "$iplineno"p /usr/script/sslist)
        echo -e "${ary_ipaddr[$iplineno]} \c"
        pingcnt=10
        ary_delytme[$iplineno]=$(ping ${ary_ipaddr[$iplineno]} -c $pingcnt -W 1|awk -v cnt=$pingcnt 'BEGIN{FS=" (time=)?"}/^64 bytes/{sum+=$(NF-1)}END{print sum/cnt}')
        if [ $(echo "${ary_delytme[$iplineno]}>0"|bc) -eq 1 ];
        then
                echo ${ary_ipaddr[$iplineno]} >> /usr/script/sslivedip
        fi
        echo Avg. Delay Time is "${ary_delytme[$iplineno]}"ms
done
min=${ary_delytme[1]}
minip=${ary_ipaddr[1]}
match_cnt=1
while (( $match_cnt < $ipline ));
do
      if [[ $(echo "$min>0"|bc) -eq 1 ]];
       then
              (( match_cnt++ ))
              if [[ $(echo "${ary_delytme[$match_cnt]}>0"|bc) -eq 1 ]];
              then
                      if [[ $(echo "$min>=${ary_delytme[$match_cnt]}"|bc) -eq 1 ]];
                      then
                              min=${ary_delytme[$match_cnt]}
                              minip=${ary_ipaddr[$match_cnt]}
                      fi
              fi
      else
               (( match_cnt++ ))
               min=${ary_delytme[$match_cnt]}
               minip=${ary_ipaddr[$match_cnt]}
       fi
done
echo The Fastest ss-server is $minip and Avg. Delay is "$min"ms

lkblk

cp /usr/minssrecord /usr/minssrecord.old
echo $minip > /usr/minssrecord
diff -a /usr/minssrecord /usr/minssrecord.old > /dev/null 2>&1
if [ $? -ne 0 ];
then
	ssh  -o "StrictHostKeyChecking no" -T git@github.com
	cp /usr/minssrecord /git/ipupdate/minssrecord
	cd /git/ipupdate/
	git add minssrecord
	uptime=$(date '+%Y%m%d%H%M')
	git commit -m "$uptime"
	git push
else     echo "No need update!"
fi
